// src/cors.ts
var isString = function(s) {
  return typeof s === "string" || s instanceof String;
};
var isOriginAllowed = function(origin, allowedOrigin) {
  if (Array.isArray(allowedOrigin)) {
    for (let i = 0;i < allowedOrigin.length; i++) {
      if (isOriginAllowed(origin, allowedOrigin[i])) {
        return true;
      }
    }
    return false;
  } else if (isString(allowedOrigin)) {
    return origin === allowedOrigin;
  } else if (allowedOrigin instanceof RegExp) {
    return allowedOrigin.test(origin);
  } else {
    return !!allowedOrigin;
  }
};
var configureOrigin = function(options, req) {
  const requestOrigin = req.headers.get("origin");
  const optsOrigin = options.origin;
  const headers = [];
  if (!optsOrigin || optsOrigin === "*") {
    headers.push({ key: "Access-Control-Allow-Origin", value: "*" });
  } else if (isString(optsOrigin)) {
    headers.push({ key: "Access-Control-Allow-Origin", value: optsOrigin });
    headers.push({ key: "Vary", value: "Origin" });
  } else {
    const isAllowed = requestOrigin ? isOriginAllowed(requestOrigin, optsOrigin) : false;
    headers.push({
      key: "Access-Control-Allow-Origin",
      value: isAllowed ? requestOrigin : false
    });
    headers.push({ key: "Vary", value: "Origin" });
  }
  return headers;
};
var configureMethods = function(options) {
  let methods = options.allowedMethods;
  if (Array.isArray(methods)) {
    methods = methods.join(",");
  }
  if (methods) {
    return { key: "Access-Control-Allow-Methods", value: methods };
  }
};
var configureCredentials = function(options) {
  if (options.credentials) {
    return { key: "Access-Control-Allow-Credentials", value: true };
  }
};
var configureAllowedHeaders = function(options, req) {
  let allowedHeaders = options.allowedHeaders;
  const headers = [];
  if (Array.isArray(allowedHeaders)) {
    allowedHeaders = allowedHeaders.join(",");
  }
  if (!allowedHeaders) {
    allowedHeaders = req.headers.get("access-control-request-headers");
    if (allowedHeaders) {
      headers.push({ key: "Vary", value: "Access-Control-Request-Headers" });
    }
  }
  if (allowedHeaders) {
    headers.push({
      key: "Access-Control-Allow-Headers",
      value: allowedHeaders
    });
  }
  return headers;
};
var configureExposedHeaders = function(options) {
  let exposeHeaders = options.exposedHeaders;
  if (Array.isArray(exposeHeaders)) {
    exposeHeaders = exposeHeaders.join(",");
  }
  if (exposeHeaders) {
    return { key: "Access-Control-Expose-Headers", value: exposeHeaders };
  }
};
var configureMaxAge = function(options) {
  const maxAge = typeof options.maxAge === "number" ? String(options.maxAge) : null;
  if (maxAge) {
    return { key: "Access-Control-Max-Age", value: maxAge };
  }
};
var applyHeaders = function(headersArr, headers) {
  for (let i = 0;i < headersArr.length; i++) {
    let header = headersArr[i];
    if (header) {
      if (Array.isArray(header)) {
        applyHeaders(header, headers);
      } else if (header.key === "Vary" && header.value) {
        headers.append(header.key, String(header.value));
      } else if (header.value) {
        headers.set(header.key, String(header.value));
      }
    }
  }
  return headers;
};
function cors(req, options = {}) {
  const reqOrigin = req.headers.get("origin");
  const method = req.method.toUpperCase();
  const headersArr = [];
  let corsOptions = { ...defaults };
  if (typeof options === "function") {
    const optionsCallbackResult = options(reqOrigin);
    corsOptions = { ...corsOptions, ...optionsCallbackResult };
  } else {
    corsOptions = { ...corsOptions, ...options };
  }
  if (typeof corsOptions.origin === "function") {
    const originCallbackResult = corsOptions.origin(reqOrigin);
    if (typeof originCallbackResult === "function") {
      throw new Error("Origin callback result cannot be a function.");
    }
    corsOptions.origin = originCallbackResult;
  }
  if (corsOptions.origin) {
    if (method === "OPTIONS") {
      headersArr.push(configureOrigin(corsOptions, req));
      headersArr.push(configureCredentials(corsOptions));
      headersArr.push(configureMethods(corsOptions));
      headersArr.push(configureAllowedHeaders(corsOptions, req));
      headersArr.push(configureMaxAge(corsOptions));
      headersArr.push(configureExposedHeaders(corsOptions));
      headersArr.push({ key: "Content-Length", value: "0" });
    } else {
      headersArr.push(configureOrigin(corsOptions, req));
      headersArr.push(configureCredentials(corsOptions));
      headersArr.push(configureExposedHeaders(corsOptions));
    }
  }
  return {
    headers: applyHeaders(headersArr, new Headers)
  };
}
var defaults = {
  origin: "*",
  allowedMethods: "GET,HEAD,PUT,PATCH,POST,DELETE",
  credentials: false
};
export {
  cors
};
